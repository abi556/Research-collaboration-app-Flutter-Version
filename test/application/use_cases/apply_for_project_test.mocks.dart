// Mocks generated by Mockito 5.4.6 from annotations
// in research_collaboration_app/test/application/use_cases/apply_for_project_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:research_collaboration_app/domain/entities/application.dart'
    as _i2;
import 'package:research_collaboration_app/domain/repositories/application_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApplication_0 extends _i1.SmartFake implements _i2.Application {
  _FakeApplication_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApplicationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockApplicationRepository extends _i1.Mock
    implements _i3.ApplicationRepository {
  MockApplicationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Application>> getApplicationsByProject(int? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getApplicationsByProject,
          [projectId],
        ),
        returnValue:
            _i4.Future<List<_i2.Application>>.value(<_i2.Application>[]),
      ) as _i4.Future<List<_i2.Application>>);

  @override
  _i4.Future<List<_i2.Application>> getApplicationsByStudent(int? studentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getApplicationsByStudent,
          [studentId],
        ),
        returnValue:
            _i4.Future<List<_i2.Application>>.value(<_i2.Application>[]),
      ) as _i4.Future<List<_i2.Application>>);

  @override
  _i4.Future<_i2.Application> applyForProject(
    int? projectId,
    int? studentId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #applyForProject,
          [
            projectId,
            studentId,
          ],
        ),
        returnValue: _i4.Future<_i2.Application>.value(_FakeApplication_0(
          this,
          Invocation.method(
            #applyForProject,
            [
              projectId,
              studentId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Application>);

  @override
  _i4.Future<_i2.Application> updateApplicationStatus(
    int? applicationId,
    _i2.ApplicationStatus? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateApplicationStatus,
          [
            applicationId,
            status,
          ],
        ),
        returnValue: _i4.Future<_i2.Application>.value(_FakeApplication_0(
          this,
          Invocation.method(
            #updateApplicationStatus,
            [
              applicationId,
              status,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Application>);

  @override
  _i4.Future<void> removeApplication(int? applicationId) => (super.noSuchMethod(
        Invocation.method(
          #removeApplication,
          [applicationId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
